---
const skills = ["Angular", "Astro", "SCSS", "GSAP", "WordPress"];
const skillsWithColors = [
  {
    name: "Angular",
    color: "#DD0031",
  },
  {
    name: "Astro",
    color: "#FF5D01",
  },
  {
    name: "SCSS",
    color: "#CD6799",
  },
  {
    name: "GSAP",
    color: "#8AC640",
  },
  {
    name: "WordPress",
    color: "#00749C",
  },
];
---

<section class="skills container">
  <h1 class="title">Skills</h1>
  <div class="skill-list">
    {
      skillsWithColors.map((skill, index) => (
        <div
          class:list={[
            "skill",
            { "is-last-skill": index === skills.length - 1 },
          ]}
        >
          <div class="background-overlay" data-background-color={skill.color} />
          {skill.name}
        </div>
      ))
    }
  </div>
</section>

<style>
  .skill-list {
    display: flex;
    flex-direction: column;
  }

  .skill {
    position: relative;
    display: flex;
    flex-direction: column;
    gap: 32px;
    border-top: 1px solid gray;
    padding-block: 8px;
    font-size: clamp(1rem, 0.648rem + 1.502vw, 2rem);
    font-weight: 200;
    overflow: hidden;
  }

  .background-overlay {
    position: absolute;
    height: 100%;
    width: 100%;
    background-color: attr(data-background-color);
    top: 0;
    left: 0;
    opacity: 0;
    z-index: -1;
  }

  .is-last-skill {
    border-bottom: 1px solid gray;
  }
</style>

<script>
  import gsap from "gsap";

  document.querySelectorAll(".skill").forEach((skill) => {
    const background = skill.querySelector(".background-overlay");

    const backgroundColor = (background as HTMLElement).dataset.backgroundColor;

    background?.setAttribute("style", `background-color: ${backgroundColor};`);

    skill.addEventListener("mouseenter", (e) => {
      const bounds = skill.getBoundingClientRect();
      const event = e as MouseEvent;

      const halfHeight = bounds.height / 2;

      gsap.set(background, { opacity: 1 });
      gsap.killTweensOf(background);

      if (event.clientY - bounds.top < halfHeight) {
        gsap.fromTo(
          background,
          {
            yPercent: -100,
          },
          {
            yPercent: 0,

            duration: 0.3,
            ease: "power1.out",
          }
        );
      } else {
        gsap.fromTo(
          background,
          {
            yPercent: 100,
          },
          {
            yPercent: 0,
            duration: 0.3,
            ease: "power1.out",
          }
        );
      }
    });

    skill.addEventListener("mouseleave", (e) => {
      const bounds = skill.getBoundingClientRect();
      const event = e as MouseEvent;

      const halfHeight = bounds.height / 2;

      gsap.killTweensOf(background);

      if (event.clientY - bounds.top < halfHeight) {
        gsap.to(background, {
          yPercent: -100,
          duration: 0.3,
          ease: "power1.out",
        });
      } else {
        gsap.to(background, {
          yPercent: 100,
          duration: 0.3,
          ease: "power1.out",
        });
      }
    });
  });
</script>
